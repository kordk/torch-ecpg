from random import random
from typing import Any, Callable, Dict, List, Tuple
import pandas
from import_data import save_dataframes


def randrange(start: float, end: float) -> Callable[[], Any]:
    '''
    Returns a callable that generates a random float between start
    and end.
    '''
    return lambda: random() * (end - start) + start


def generate_codes(
    num: int, prefix: str = '', suffix: str = '', start: int = 1
) -> List[str]:
    '''
    Returns a list of num strings in ascending order, formatted with
    a prefix, suffix, and padded with up to two zeros. Start indicates
    the start index, default 1.
    '''
    out = []
    for i in range(start, num + start):
        out.append(prefix + f'{i:03d}' + suffix)
    return out


def generate_dataframe(
    column_names: List[str], row_names: List[str], value_gen: Callable[[], Any]
) -> pandas.DataFrame:
    '''
    Generates a pandas dataframe with columns dictated by column_names
    and rows dictated by row_names. The values in this dataframe are
    generated by calling value_gen, which returns any value.
    '''
    n = len(row_names)
    data = {column: [value_gen() for _ in range(n)] for column in column_names}
    return pandas.DataFrame(
        data,
        row_names,
    )


def generate_covariates(
    row_names: List[str], covariate_template: Dict[str, Callable[[], Any]]
) -> pandas.DataFrame:
    '''
    Generates the covariate dataframe given the row_names, a list of
    person ids, and covariate_template. The covariate template is a
    dictionary that maps a characteristic to any value. The function
    returns the covariate dataframe.
    '''
    n = len(row_names)
    data = {
        column: [value_gen() for _ in range(n)]
        for column, value_gen in covariate_template.items()
    }
    return pandas.DataFrame(
        data,
        row_names,
    )


def generate_data(
    sample_size: int, m_rows: int, g_rows: int
) -> Tuple[pandas.DataFrame, pandas.DataFrame]:
    '''
    Generates two pandas dataframes for methylation and gene expression.
    Accepts a sample_size for the number of people, m_rows for the
    number of methylation loci, and g_rows for the number of gene
    expression loci. Returns a tuple of the methylation and gene
    expression dataframes.
    '''
    person_codes = generate_codes(sample_size)
    m_row_codes = generate_codes(m_rows, 'cg')
    g_row_codes = generate_codes(g_rows, 'ILMN_')

    M = generate_dataframe(person_codes, m_row_codes, randrange(0, 1))
    G = generate_dataframe(person_codes, g_row_codes, randrange(-1, 100))

    covariate_template = {
        'age': randrange(18, 64),
        'sex': lambda: bool(round(random())),  # Male == True
    }
    C = generate_covariates(person_codes, covariate_template)

    return M, G, C


def save_test_data() -> None:
    save_dataframes(generate_data(300, 10000, 10000))


if __name__ == '__main__':
    save_test_data()
